// we store video, avatar and coverimage etc to third party services (aws/cloudinary)
// we save only url/link of that avatar,coverImg to our database
// id is generated by mongodb
// we also use 'bcrypt' here to encrypt and decrypt password (hashing of pass)
// we also use token "JWT"(bearer token, like a master which has key) which create a token (unreadable format of a data) 


import mongoose, {Schema} from "mongoose" ;
import bcrypt from "bcrypt"
import jwt from "jsonwebtoken"



const userSchema = new Schema(
  {
    username : {
      type : String,
      required : true,
      unique : true,
      lowercase : true,
      trim : true,
      index : true      // optimize search result
    },
    email : {
      type : String,
      required : true,
      unique : true,
      lowercase : true,
      trim : true,
    },
    fullname : {
      type : String,
      required : true,
      trim : true,
      index : true      // optimize search result
    },
    avatar : {
      type : String, // cloudinary url
      required : true,
    },
    coverImage : {
      type : String   // cloudinary url
    },
    watchHistory : [
      {
        type : Schema.Types.ObjectId,
        ref : "Video"
      }
    ],
    password : {  // pass is stored in encrypted form
      type : String,
      required : [true,'Password is required']  // custom message with true field 
    },
    refreshToken : {
      type : String
    }
  },
  {
    timestamp : true
  }
)


// we use hooke provided by middleware to execute bcrypt like "pre-hooke" to run this code before saving data to database
userSchema.pre("save" , async function (next) {
  if(!this.isModified("password")) return next();

  this.password = bcrypt.hash(this.password,10)
  next();
})

// custom methods to compare pass when provided by user
userSchema.methods.isPasswordCorrect = async function (password){
  return await bcrypt.compare(password,this.password)
}


// custom methods to create token 
userSchema.methods.generateAccessToken = function(){
  return jwt.sign(
    {
      _id : this._id,
      email :this.email,
      username : this.username,
      fullname : this.fullname
    },
    process.env.ACCESS_TOKEN_SECRET,
    {
      expiresIn : process.env.ACCESS_TOKEN_EXPIRY
    }
  )
}




userSchema.methods.generateRefreshToken = function(){
  return jwt.sign(
    {
      _id : this._id,
    },
    process.env.REFRESH_TOKEN_SECRET,
    {
      expiresIn : process.env.REFRESH_TOKEN_EXPIRY
    }
  )
}

export const User = mongoose.model("User" , userSchema) 